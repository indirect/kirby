#!/bin/bash

command -v hyperfine > /dev/null || (echo "You need to install 'hyperfine' with cargo or brew." && exit 1)

if [[ -z "$1" ]]; then
  mkdir -p logs
  test -e logs/example.log.gz || curl -Lo logs/example.log.gz "https://github.com/rubytogether/kirby/releases/download/log-sample/example.log.gz"
  LOG="logs/example.log.gz"
else
  LOG="$1"
  shift
fi

# STEP 0: Make sure there is no left-over profiling data from previous runs
rm -rf /tmp/pgo-data

# STEP 1: Build the instrumented binaries
RUSTFLAGS="-Cprofile-generate=/tmp/pgo-data" \
  cargo build --release

# STEP 2: Run the instrumented binaries with some typical data
ls logs/* | xargs -L1 target/release/kirby

# STEP 3: Merge the `.profraw` files into a `.profdata` file
$(ls ~/.rustup/toolchains/*/lib/rustlib/*/bin/llvm-profdata) \
  merge -o /tmp/pgo-data/merged.profdata /tmp/pgo-data

# STEP 4: Use the `.profdata` file for guiding optimizations
RUSTFLAGS="-Cprofile-use=/tmp/pgo-data/merged.profdata" \
    cargo build --release --bin kirby

# cargo build --bin kirby --release

echo
echo "kirby commit $(git log -1 --pretty=format:%H)"
hyperfine --warmup 3 "target/release/kirby $LOG" "$@"
